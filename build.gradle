import com.github.spotbugs.snom.Confidence

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'jacoco'
    alias(libs.plugins.spotless)
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.nexus.publish)
}

group = 'org.omegat'
version = '3.0.6-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.slf4j.api)
    testImplementation(libs.junit4)
    testRuntimeOnly(libs.logback)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    failOnError = false
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    manifest {
        attributes("Automatic-Module-Name": "org.omegat.vldocking")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            groupId = 'org.omegat'
            artifactId 'vldocking'
            from components.java

            pom {
                name = 'vldocking'
                description = 'vldocking library'
                url = 'https://omegat.org'
                scm {
                    connection = "scm:git:https://github.com/omegat-org/vldocking"
                    developerConnection = "scm:git:https://github.com/omegat-org/vldocking"
                    url = "https://github.com/omegat-org/vldocking/"
                }
                licenses {
                    license {
                        name = 'The GNU Lesser General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'omegat'
                        name = 'OmegaT Developers'
                        email = 'info@omegat.org'
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/omegat-org/vldocking.git")
                    developerConnection.set("scm:git:git://github.com/omegat-org/vldocking.git")
                    url.set("https://github.com/omegat-org/vldocking")
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    if (!findProperty("signing.keyId")) {
        useGpgCmd()
    }
}
def sonatypeUsername = project.hasProperty("sonatypeUsername")? project.property('sonatypeUsername') : System.getenv('SONATYPE_USER')
def sonatypePassword = project.hasProperty("sonatypePassword")? project.property('sonatypePassword') : System.getenv('SONATYPE_PASS')
if (sonatypeUsername != null && sonatypePassword != null) {
    nexusPublishing.repositories{
        sonatype {
            nexusUrl.set(new URI("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(new URI("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(sonatypeUsername)
            password.set(sonatypePassword)

        }
    }
}

def envIsCi = project.hasProperty('envIsCi') as Boolean

spotbugs {
    reportLevel = Confidence.valueOf('HIGH')
}

tasks.register('spotbugsMainReport') {
    def reportFile = file("build/reports/spotbugs/main.txt")
    doLast {
        if (reportFile.exists()) {
            println()
            reportFile.readLines().forEach {
                println(it)
            }
        }
    }
    group = 'verification'
}

tasks.register('spotbugsTestReport') {
    def reportFile = file("build/reports/spotbugs/test.txt")
    doLast {
        if (reportFile.exists()) {
            println()
            reportFile.readLines().forEach {
                println(it)
            }
        }
    }
    group = 'verification'
}

spotbugsMain {
    if (envIsCi) {
        extraArgs = ['-longBugCodes']
        jvmArgs = ['-Duser.language=en']
    }
    reports {
        text.required = envIsCi
        html.required = !envIsCi
    }
    finalizedBy(spotbugsMainReport)
}

spotless {
    java {
        target("src/*/java/**/*.java")
        palantirJavaFormat()
        importOrder()
        removeUnusedImports()
        formatAnnotations()
    }
}